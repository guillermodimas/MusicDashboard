@page "/"
@inject InterfaceItunesAPIService _api
@inject ISnackbar snackbar
@inject IJSRuntime _jsRuntime;
@inject IDialogService dialogService
@using System.Linq.Dynamic.Core

<MudGrid Class="mb-4">
    <MudItem md="8">
        <MudTextField Def @bind-Value="Search" Label="Search By Term" OnKeyUp="Enter" Immediate="true" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" OnAdornmentClick="() => SearchByKeyword()" Clearable="true" AdornmentColor="Color.Secondary" />
    </MudItem>
    <MudItem md="4">
        <MudSelect T="string" Label="Sort By" AnchorOrigin="Origin.BottomCenter" MultiSelection="false" Variant="Variant.Outlined" Value="@SortBy" ValueChanged="SortByValueChanged">
            <MudSelectItem Value="@("trackName")">Song</MudSelectItem>
            <MudSelectItem Value="@("artistName")">Artist</MudSelectItem>
            <MudSelectItem Value="@("collectionName")">Album</MudSelectItem>
            <MudSelectItem Value="@("releaseDate")">Release Date</MudSelectItem>
        </MudSelect>
    </MudItem>
</MudGrid>
<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Results">
        @if (musicResults != null)
        {
            if (musicResults.resultCount == 0)
            {
                <MudAlert Severity="Severity.Info">No Results found.</MudAlert>
            }
            else
            {


                <MudGrid Spacing="3" Class="mb-4">
                    @foreach (var record in (musicResults.resultCount > 50 ? musicResults.results.Take(25) : musicResults.results))
                    {


                        <MudContainer Style="max-width: 350px" Class="mt-3">
                            <MudCard>
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText><MudLink Href="@record.trackViewUrl" Target="_Target" Color="Color.Inherit" Typo="Typo.h6">@record.trackName</MudLink></MudText>
                                        <MudText><MudLink Href="@record.artistViewUrl" Target="_Target" Color="Color.Inherit" Typo="Typo.body2">Artist: @record.artistName</MudLink></MudText>
                                        <MudText><MudLink Href="@record.artistViewUrl" Target="_Target" Color="Color.Inherit" Typo="Typo.body2">Album: @record.collectionName</MudLink></MudText>
                                    </CardHeaderContent>
                                    <CardHeaderActions>





                                        <MudToggleIconButton Toggled="record.togglePlay" ToggledChanged="(x => OnToggledChanged(x, record.trackId.ToString()))" Icon="@Icons.Material.Filled.PlayCircle" Color="@Color.Primary" Size="Size.Large" Title="Press to Play" ToggledSize="Size.Large" ToggledIcon="@Icons.Material.Filled.PauseCircle" ToggledColor="@Color.Primary" ToggledTitle="Press to Pause"></MudToggleIconButton>




                                        <audio id="@record.trackId.ToString()" src="@record.previewUrl" />
                                    </CardHeaderActions>
                                </MudCardHeader>


                                <MudCardContent Style="text-align: center">
                                    <MudImage Src="@record.artworkUrl100" Elevation="25" Class="rounded-lg" />

                                </MudCardContent>


                            </MudCard>
                        </MudContainer>





                    }
                </MudGrid>


            }
        }
        else
        {
            <MudAlert Severity="Severity.Normal">Fetching your request...</MudAlert>
            <MudGrid>

                <MudContainer Style="max-width: 350px" Class="mt-3">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudSkeleton Animation="Animation.Wave" Width="65%" />
                                <MudSkeleton Animation="Animation.Wave" Width="65%" />
                                <MudSkeleton Animation="Animation.Wave" Width="65%" />
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudSkeleton SkeletonType="SkeletonType.Circle" Width="50px" Height="50px" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="100px" />

                    </MudCard>
                </MudContainer>
                <MudContainer Style="max-width: 350px" Class="mt-3">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudSkeleton Animation="Animation.Wave" Width="65%" />
                                <MudSkeleton Animation="Animation.Wave" Width="65%" />
                                <MudSkeleton Animation="Animation.Wave" Width="65%" />
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudSkeleton SkeletonType="SkeletonType.Circle" Width="50px" Height="50px" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="100px" />

                    </MudCard>
                </MudContainer>
                <MudContainer Style="max-width: 350px" Class="mt-3">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudSkeleton Animation="Animation.Wave" Width="65%" />
                                <MudSkeleton Animation="Animation.Wave" Width="65%" />
                                <MudSkeleton Animation="Animation.Wave" Width="65%" />
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudSkeleton SkeletonType="SkeletonType.Circle" Width="50px" Height="50px" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="100px" />

                    </MudCard>
                </MudContainer>
            </MudGrid>

        }
    </MudTabPanel>
    <MudTabPanel Text="Histogram" Disabled="@(musicResults?.resultCount == 0 ? true : false)">
        @if (musicResults != null)
        {
            <HistogramPopup musicResults="@musicResults" />
        }

    </MudTabPanel>
</MudTabs>

@code
{
    private ItunesMusicResultsModel? musicResults { get; set; }

    private string previousAudioElement;
    public string Search { get; set; } = "Ed Sheeran";
    public string SortBy { get; set; } = "trackName";
    protected override async Task OnInitializedAsync()
    {

        await SearchByKeyword();

    }

    private async Task SearchByKeyword()
    {
        try
        {
            if (!string.IsNullOrEmpty(previousAudioElement))
            {
                try
                {
                    await _jsRuntime.InvokeAsync<string>("PauseAudio", previousAudioElement);
                }
                catch
                {

                }
                finally
                {
                    previousAudioElement = null;
                }


            }

            musicResults = null;
            musicResults = await _api.GetItunesMusicResult(Search);
            musicResults.results = musicResults.results.AsQueryable().OrderBy($"{SortBy} ASC").ToList();
        }
        catch (Exception ex)
        {

#if (DEBUG)
    snackbar.Add($"There was an issue fetching the iTunes data requested: {ex.Message} ", Severity.Warning);
#else
            snackbar.Add($"There was an issue fetching the iTunes data requested", Severity.Warning);
#endif
        }
    }

    public async Task OnToggledChanged(bool toggled, string audioElementID)
    {
        //code below will dynamically stop/play selected tracks while pausing any active playing tracks
        musicResults.results.Single(x => x.trackId == Convert.ToInt32(audioElementID)).togglePlay = !musicResults.results.Single(x => x.trackId == Convert.ToInt32(audioElementID)).togglePlay;

        if (string.IsNullOrEmpty(previousAudioElement))
        {
            previousAudioElement = audioElementID;

        }

        if (toggled)
        {

            if (previousAudioElement != audioElementID)
            {
                await _jsRuntime.InvokeAsync<string>("PauseAudio", previousAudioElement);

                musicResults.results.Single(x => x.trackId == Convert.ToInt32(previousAudioElement)).togglePlay = !toggled;

            }

            await _jsRuntime.InvokeAsync<string>("PlayAudio", audioElementID);
            previousAudioElement = audioElementID;
        }
        else
        {
            await _jsRuntime.InvokeAsync<string>("PauseAudio", audioElementID);
            if (previousAudioElement != audioElementID)
            {
                await _jsRuntime.InvokeAsync<string>("PauseAudio", previousAudioElement);

                musicResults.results.Single(x => x.trackId == Convert.ToInt32(previousAudioElement)).togglePlay = !toggled;
            }
            previousAudioElement = audioElementID;
        }

    }
    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            await SearchByKeyword();
        }
    }
    private async Task SortByValueChanged(string value)
    {
        SortBy = value;
        musicResults.results = musicResults.results.AsQueryable().OrderBy($"{SortBy} ASC").ToList();
        StateHasChanged();
    }
    private void OpenHistogramDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium };
        dialogService.Show<HistogramPopup>("Generated Histogram", options);
    }
}

